rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             (request.auth.token.email == 'admin@finditfast.com' ||
              exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    function isOwner(resource) {
      return isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
    
    function isStoreOwner() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/storeOwners/$(request.auth.uid));
    }
    
    function isResourceOwner(resource) {
      return isAuthenticated() && request.auth.uid == resource.id;
    }

    // Global admin access rule - allows admins to read/write all collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // Stores collection
    match /stores/{storeId} {
      // Anyone can read store information
      allow read: if true;
      
      // Only authenticated store owners can create stores, or admins
      // Special case: allow creation for temporary store IDs (temp_*) by authenticated store owners
      allow create: if (isAuthenticated() && 
                       isStoreOwner() &&
                       request.auth.uid == resource.data.ownerId) || isAdmin() ||
                       (isAuthenticated() && isStoreOwner() && storeId.size() > 5 && storeId[0:5] == 'temp_');
      
      // Only the store owner can update their store, or admins
      // Special case: allow updates for temporary store IDs (temp_*) by authenticated store owners
      allow update: if isOwner(resource) || isAdmin() || 
                       (isAuthenticated() && isStoreOwner() && storeId.size() > 5 && storeId[0:5] == 'temp_');
      
      // Only the store owner can delete their store, or admins
      allow delete: if isOwner(resource) || isAdmin();
    }

    // Items collection
    match /items/{itemId} {
      // Anyone can read items
      allow read: if true;
      
      // Temporarily allow authenticated users to create items for debugging
      // TODO: Re-enable strict store owner checks once auth is working
      allow create: if isAuthenticated();
      
      // Original strict rules (commented out for debugging):
      // Only store owners can create items for their stores, or admins
      // allow create: if isAdmin() || (isAuthenticated() && 
      //                 isStoreOwner() &&
      //                 exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
      //                 get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid);
      
      // Temporarily allow authenticated users to update items for debugging
      allow update: if isAuthenticated();
      
      // Original strict rules (commented out for debugging):
      // Only the store owner can update items in their store, or admins
      // allow update: if isAdmin() || (isAuthenticated() && 
      //                 isStoreOwner() &&
      //                 exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
      //                 get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid);
      
      // Temporarily allow authenticated users to delete items for debugging
      allow delete: if isAuthenticated();
      
      // Original strict rules (commented out for debugging):
      // Only the store owner can delete items from their store, or admins
      // allow delete: if isAdmin() || (isAuthenticated() && 
      //                 isStoreOwner() &&
      //                 exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
      //                 get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid);
    }

    // Store owners collection
    match /storeOwners/{ownerId} {
      // Temporarily allow all authenticated users to read/write storeOwners for debugging
      allow read, write: if isAuthenticated();
      
      // Original rules (commented out for debugging):
      // Store owners can read their own data, admins can read all
      // allow read: if isResourceOwner(resource) || isAdmin();
      
      // Only authenticated users can create store owner profiles for themselves
      // allow create: if isAuthenticated() && 
      //                 request.auth.uid == ownerId;
      
      // Store owners can update their own data, admins can update any
      // allow update: if isResourceOwner(resource) || isAdmin();
      
      // Store owners can delete their own data, admins can delete any
      // allow delete: if isResourceOwner(resource) || isAdmin();
    }

    // Store plans collection
    match /storePlans/{planId} {
      // Temporarily allow all authenticated users to read/write storePlans for debugging
      // TODO: Tighten these rules once permissions are working
      allow read, write: if isAuthenticated();
      
      // Original rules (commented out for debugging):
      // Store owners can read their own plans and plans for their stores, admins can read all
      // allow read: if isAdmin() || (isAuthenticated() && 
      //               (resource.data.ownerId == request.auth.uid ||
      //                exists(/databases/$(database)/documents/stores/$(resource.data.storeId)) &&
      //                get(/databases/$(database)/documents/stores/$(resource.data.storeId)).data.ownerId == request.auth.uid));
      
      // Store owners can create plans for their stores, admins can create any
      // allow create: if isAdmin() || (isAuthenticated() && 
      //                 isStoreOwner() &&
      //                 request.auth.uid == request.resource.data.ownerId &&
      //                 (request.resource.data.storeId.matches('temp_.*') ||
      //                  (exists(/databases/$(database)/documents/stores/$(request.resource.data.storeId)) &&
      //                   get(/databases/$(database)/documents/stores/$(request.resource.data.storeId)).data.ownerId == request.auth.uid)));
      
      // Store owners can update their own plans, admins can update any
      // allow update: if isAdmin() || (isAuthenticated() && 
      //                 resource.data.ownerId == request.auth.uid);
      
      // Store owners can delete their own plans, admins can delete any
      // allow delete: if isAdmin() || (isAuthenticated() && 
      //                 resource.data.ownerId == request.auth.uid);
    }

    // Reports collection
    match /reports/{reportId} {
      // Anyone can read reports (for analytics/admin purposes)
      allow read: if true;
      
      // Anyone can create reports (users reporting issues)
      allow create: if true;
      
      // Only store owners can update reports for items in their stores, or admins
      allow update: if isAdmin() || (isAuthenticated() && 
                       isStoreOwner() &&
                       exists(/databases/$(database)/documents/items/$(resource.data.itemId)) &&
                       exists(/databases/$(database)/documents/stores/$(get(/databases/$(database)/documents/items/$(resource.data.itemId)).data.storeId)) &&
                       get(/databases/$(database)/documents/stores/$(get(/databases/$(database)/documents/items/$(resource.data.itemId)).data.storeId)).data.ownerId == request.auth.uid);
      
      // Only store owners can delete reports for items in their stores, or admins
      allow delete: if isAdmin() || (isAuthenticated() && 
                       isStoreOwner() &&
                       exists(/databases/$(database)/documents/items/$(resource.data.itemId)) &&
                       exists(/databases/$(database)/documents/stores/$(get(/databases/$(database)/documents/items/$(resource.data.itemId)).data.storeId)) &&
                       get(/databases/$(database)/documents/stores/$(get(/databases/$(database)/documents/items/$(resource.data.itemId)).data.storeId)).data.ownerId == request.auth.uid);
    }

    // Store requests collection
    match /storeRequests/{requestId} {
      // Store owners can read their own requests, admins can read all
      allow read: if isAuthenticated() && 
                     (resource.data.requestedBy == request.auth.uid || isAdmin());
      
      // Any authenticated user can create store requests with their own requestedBy
      allow create: if isAuthenticated() && 
                       request.resource.data.requestedBy == request.auth.uid;
      
      // Store owners can update their own requests, admins can update any
      allow update: if isAdmin() || (isAuthenticated() && 
                       resource.data.requestedBy == request.auth.uid);
      
      // Store owners can delete their own requests, admins can delete any
      allow delete: if isAdmin() || (isAuthenticated() && 
                       resource.data.requestedBy == request.auth.uid);
    }

    // Admins collection
    match /admins/{adminId} {
      // Admins can read their own data
      allow read: if isAuthenticated() && request.auth.uid == adminId;
      
      // Allow admin creation (for setup)
      allow create: if isAuthenticated() && 
                       request.auth.uid == adminId &&
                       request.auth.token.email == resource.data.email;
      
      // Admins can update their own data
      allow update: if isAuthenticated() && request.auth.uid == adminId;
      
      // Admins can delete their own data
      allow delete: if isAuthenticated() && request.auth.uid == adminId;
    }
  }
}